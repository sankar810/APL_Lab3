grammar SILGrammar;

@header {
package SILG;
import java.util.HashMap;
import java.util.*; 
}

@members {
/** Map variable name to Integer object holding value */
HashMap memory = new HashMap();
}

prog	:	statement+ end;
statement
	:	 expr NEWLINE{System.out.println($expr.value);}
	|'PRINT' print
	|'PRINTLN' printline
	|'INTEGER' vars
	|'INPUTS' inputs
	|'LET' ID '=' expr {memory.put($ID.text, new Integer($expr.value));}
	|'NEWLINE' 
	;

inputs	:(ID{memory.put($ID.text, (Integer.parseInt((new DataInputStream(System.in)).readline())));}
	|	',')+
	;
	


end	:	 'END' {System.out.println();}
	;


vars	:	(ID{memory.put($ID.text, new Integer(0));}
	|	NEWLINE
	|',')*
	;
	
print
	:	(STRING{System.out.print($STRING.text.toString().split("\"")[l]);}
	|ID{System.out.print(memory.get($ID.text));})*
	{System.out.println();}
	;
	
printline
	:	(STRING{System.out.print($STRING.text.toString().split("\"")[l]);}
	|ID{System.out.print(memory.get($ID.text));})*
	{System.out.println();}
	;	
	
expr returns [int value]
    :   e=multExpr {$value = $e.value;}
        (   '+' e=multExpr {$value += $e.value;}
        |   '-' e=multExpr {$value -= $e.value;}
        )*
    ;
multExpr returns [int value]
    :   e=atom {$value = $e.value;} 
	('*' e=atom {$value *= $e.value;}
	|'/' e=atom {$value *= $e.value;})*
    ;

atom returns [int value]
    :   INT {$value = Integer.parseInt($INT.text);}
    |   ID
        {
        Integer v = (Integer)memory.get($ID.text);
        if ( v!=null ) $value = v.intValue();
        else System.err.println("undefined variable "+$ID.text);
        }
    |   '(' expr ')' {$value = $expr.value;}
    ;
    
    
NEWLINE	:	(' '
			|'\r'
			|'\t'
			|'\n'
			){$channel=HIDDEN;}
			;
ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;
    

INT :	'0'..'9'+
    ;



FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

COMMENT
    :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'+
        ) {$channel=HIDDEN;}
    ;

STRING
    :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
    ;

CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
    ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

fragment
OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;
